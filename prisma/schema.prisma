generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  createdAt       DateTime         @default(now())
  mainCurrency    String
  mainLanguage    String
  paymentAccounts PaymentAccount[]
  goals           Goal[]
  transactions    Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PaymentAccount {
  id              String        @id @default(cuid())
  type            String?
  name            String
  number          String?
  balance         Int
  currency        String
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  goal            Goal[]
  blockedForGoals Int           @default(0)
  transactionOut  Transaction[] @relation("AccountFrom")
  transactionIn   Transaction[] @relation("AccountTo")
}

model Goal {
  id             String           @id @default(cuid())
  name           String
  finishDate     DateTime         @db.Date
  color          String
  icon           String
  amount         Int
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  paymentAccount PaymentAccount[]
}

model Transaction {
  id              String          @id @default(cuid())
  transactionType Int
  name            String
  description     String?
  amount          Int
  currency        String
  date            DateTime
  frequency       Int?
  category        String?
  user            User?           @relation(fields: [userId], references: [id])
  userId          String?
  accountTo       PaymentAccount? @relation("AccountTo", fields: [accountToId], references: [id])
  accountToId     String?
  accountFrom     PaymentAccount? @relation("AccountFrom", fields: [accountFromId], references: [id])
  accountFromId   String?
}

model goalTransactions {
  id String @id @default(cuid())
  // goal Goal
  // paymentAccount
  // amount
}
