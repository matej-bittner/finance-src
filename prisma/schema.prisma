generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  createdAt       DateTime          @default(now())
  mainCurrency    String
  mainLanguage    String
  paymentAccounts PaymentAccount[]
  goals           Goal[]
  transactions    Transaction[]
  PeriodicPayment PeriodicPayment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model PaymentAccount {
//   id              String            @id @default(cuid())
//   type            String?
//   name            String
//   number          String?
//   balance         Int               @default(0)
//   currency        String
//   user            User?             @relation(fields: [userId], references: [id])
//   userId          String?
//   goal            Goal?             @relation(fields: [goalId], references: [id])
//   blockedForGoal  Boolean           @default(false)
//   transactionOut  Transaction[]     @relation("AccountFrom")
//   transactionIn   Transaction[]     @relation("AccountTo")
//   periodicPayment PeriodicPayment[]
//   goalId          String?
// }

model PaymentAccount {
  id              String            @id @default(cuid())
  type            Int
  name            String
  number          String?
  balance         Int               @default(0)
  currency        String
  user            User?             @relation(fields: [userId], references: [id])
  userId          String?
  goal            Goal?             @relation(fields: [goalId], references: [id])
  blockedForGoal  Boolean           @default(false)
  transactionOut  Transaction[]     @relation("AccountFrom")
  transactionIn   Transaction[]     @relation("AccountTo")
  periodicPayment PeriodicPayment[]
  goalId          String?
  updateBalance   UpdateBalance[]
}

model UpdateBalance {
  id               String          @id @default(cuid())
  date             DateTime
  amount           Int
  paymentAccount   PaymentAccount? @relation(fields: [paymentAccountId], references: [id])
  paymentAccountId String?
  currency         String
  firstBalance     Boolean?
}

model Goal {
  id             String           @id @default(cuid())
  name           String
  finishDate     DateTime         @db.Date
  color          String
  icon           String
  amount         Int
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  paymentAccount PaymentAccount[]
}

model Transaction {
  id              String          @id @default(cuid())
  transactionType Int
  name            String
  description     String?
  amount          Int
  currency        String
  date            DateTime
  frequency       Int?
  user            User?           @relation(fields: [userId], references: [id])
  userId          String?
  accountTo       PaymentAccount? @relation("AccountTo", fields: [accountToId], references: [id])
  accountToId     String?
  accountFrom     PaymentAccount? @relation("AccountFrom", fields: [accountFromId], references: [id])
  accountFromId   String?
  category        Int?
}

model PeriodicPayment {
  id              String @id @default(cuid())
  transactionType Int

  firstPayment  DateTime
  endOfPayment  DateTime?
  // on create == firstPayment, then + frequency
  toProcess     DateTime
  // when was lat time created transaction and decresed amount on account
  lastProcessed DateTime?
  name          String
  description   String?
  amount        Int
  currency      String
  frequency     Int
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  category      Int?
  accountFrom   PaymentAccount @relation(fields: [accountFromId], references: [id])
  accountFromId String
}
